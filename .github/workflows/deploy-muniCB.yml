name: Deploy Municipalidad CB to Server

on:
  push:
    branches:
      - muniCB-deploy

jobs:
  deploy:
    runs-on: self-hosted

    steps:
      - name: Checkout code
        uses: actions/checkout@v2

      - name: Set up SSH
        uses: webfactory/ssh-agent@v0.5.3
        with:
          ssh-private-key: ${{ secrets.SSH_PRIVATE_KEY }}

      - name: Test SSH connection
        run: |
          echo "Testing SSH connection..."
          ssh -vvv -o StrictHostKeyChecking=no ${{ secrets.REMOTE_USER }}@${{ secrets.REMOTE_HOST }} "echo 'SSH connection successful'"

      - name: Deploy to server
        run: |
          REPO_BRANCH="muniCB-deploy"
          DEPLOY_PATH="/var/www/municb"

          ssh -o StrictHostKeyChecking=no ${{ secrets.REMOTE_USER }}@${{ secrets.REMOTE_HOST }} << 'EOF'
            set -e
            echo "Starting deployment..."
            if [ ! -d "$DEPLOY_PATH/.git" ]; then
              echo "Creating directory and cloning repository..."
              sudo mkdir -p $DEPLOY_PATH
              sudo chown ${{ secrets.REMOTE_USER }}:www-data $DEPLOY_PATH
              git clone --single-branch $REPO_BRANCH https://${{ secrets.GH_PAT }}@github.com/AppChainSolutions/esalud.git /var/www/municb
            else
              echo "Setting permissions for .git directory..."
              sudo chown -R ${{ secrets.REMOTE_USER }}:www-data /var/www/municb/.git
              echo "Pulling latest changes..."
              cd /var/www/municb
              git pull origin muniCB-deploy
            fi

            cd /var/www/municb

            # Asignar la propiedad de las carpetas al usuario del servidor web
            sudo chown -R ${{ secrets.REMOTE_USER }}:www-data /var/www/municb/municb

            # Asignar permisos de lectura y escritura a las carpetas necesarias
            sudo chmod -R 775 /var/www/municb/municb/storage
            sudo chmod -R 775 /var/www/municb/municb/bootstrap/cache

            # Asegurarse de que los archivos tengan los permisos adecuados
            sudo find /var/www/municb/municb -type f -exec chmod 644 {} \;

            # Asegurarse de que las carpetas tengan los permisos adecuados
            sudo find /var/www/municb/municb -type d -exec chmod 755 {} \;

            # Asegurarse de que el archivo .env tenga los permisos adecuados
            sudo chown ${{ secrets.REMOTE_USER }}:www-data /var/www/municb/municb/.env
            sudo chmod 664 /var/www/municb/municb/.env

      - name: Set environment variables
        run: |
            USUARIO_DB="municb_user"
            CLAVE_DB="clave123"
            APP_NAME="casablanca/ccm"
            APP_ENV="production"
            APP_KEY="base64:yB91h0NIlVel0QLDQnKvdOHpIKqEexzsbv8JUQglzWw="
            APP_URL="https://vulco.appchain.solutions"
            DB_CONNECTION="pgsql"
            DB_HOST="localhost"
            DB_PORT="5432"
            DB_DATABASE="municb"
            DB_USERNAME="municb_user"
            DB_PASSWORD="40I6jimINanggfopnc0F"


            # Establece variables de entorno .ENV
            echo "Setting environment variables..."
            echo "APP_NAME=$APP_NAME" > .env
            echo "APP_ENV=$APP_ENV" >> .env
            echo "APP_KEY=$APP_KEY" >> .env
            echo "APP_DEBUG=true" >> .env
            echo "APP_URL=$APP_URL" >> .env
            echo "LOG_CHANNEL=stack" >> .env
            echo "LOG_DEPRECATIONS_CHANNEL=null" >> .env
            echo "LOG_LEVEL=debug" >> .env
            echo "DB_CONNECTION=$DB_CONNECTION" >> .env
            echo "DB_HOST=$DB_HOST" >> .env
            echo "DB_PORT=$DB_PORT" >> .env
            echo "DB_DATABASE=$DB_DATABASE" >> .env
            echo "DB_USERNAME=$DB_USERNAME" >> .env
            echo "DB_PASSWORD=$DB_PASSWORD" >> .env
            echo "BROADCAST_DRIVER=log" >> .env
            echo "CACHE_DRIVER=file" >> .env
            echo "QUEUE_CONNECTION=sync" >> .env
            echo "SESSION_DRIVER=file" >> .env
            echo "SESSION_LIFETIME=120" >> .env
            echo "MAIL_DRIVER=smtp" >> .env
            # echo "MAIL_HOST=" >> .env

            # Ejecutar comandos de Artisan para optimizar la aplicaciÃ³n
            echo "Running Artisan commands..."
            php artisan migrate --force
            php artisan config:cache
            php artisan route:cache
            php artisan view:cache

            echo "Clearing cache and optimizing..."
            php artisan optimize:clear
            php artisan optimize

            echo "Clearing authentication files..."
            php artisan auth:clear

            echo "Clearing temporary files..."
            rm -rf storage/framework/cache/*
            rm -rf storage/framework/sessions/*
            rm -rf storage/framework/views/*
            rm -rf storage/clockwork/*

            echo "Clearing log files..."
            rm -rf storage/logs/*

            echo "Clearing root directory except specific files..."
            find . -mindepth 1 -maxdepth 1 -not -name 'composer.json' -not -name 'artisan' -not -name '.env' -not -name '.' -not -name '..' -exec rm -rf {} +

            echo "Modifying composer.json to remove development dependencies..."
            jq 'del(.["autoload-dev"], .["config-dev"], .["dependencies-dev"])' composer.json > composer.tmp.json && mv composer.tmp.json composer.json

            echo "Installing production dependencies..."
            composer install --no-dev

            echo "Cleanup complete!"

            echo "Deployment completed successfully."
            EOF
