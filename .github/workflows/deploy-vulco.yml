name: Deploy Vulco to Server

on:
  push:
    branches:
      - vulco-deploy

jobs:
  deploy:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout code
        uses: actions/checkout@v2

      - name: Set up SSH
        uses: webfactory/ssh-agent@v0.5.3
        with:
          ssh-private-key: ${{ secrets.SSH_PRIVATE_KEY }}

      - name: Test SSH connection
        run: |
          echo "Testing SSH connection..."
          ssh -vvv -o StrictHostKeyChecking=no ${{ secrets.REMOTE_USER }}@${{ secrets.REMOTE_HOST }} "echo 'SSH connection successful'"
      - name: Deploy to server
        run: |
          ssh -o StrictHostKeyChecking=no ${{ secrets.REMOTE_USER }}@${{ secrets.REMOTE_HOST }} << 'EOF'
            set -e
            echo "Starting deployment..."
            if [ ! -d "/var/www/vulco/.git" ]; then
              echo "Creating directory and cloning repository..."
              sudo mkdir -p "/var/www/vulco"
              sudo chown ${{ secrets.REMOTE_USER }}:www-data "/var/www/vulco"
              git clone -b vulco-deploy https://git@github.com/AppChainSolutions/esalud.git "/var/www/vulco"
                
              cd /var/www/vulco

              echo "Setting environment variables..."
              rm .env
              cp .env.deploy .env

              # Asignar la propiedad de las carpetas al usuario del servidor web
              sudo chown -R ${{ secrets.REMOTE_USER }}:www-data /var/www/vulco
              
              # Asignar permisos de lectura y escritura a las carpetas necesarias
              sudo chmod -R 775 /var/www/vulco/storage
              sudo chmod -R 775 /var/www/vulco/bootstrap/cache
              
              # Asegurarse de que los archivos tengan los permisos adecuados
              sudo find /var/www/vulco/ -type f -exec chmod 644 {} \;
              
              # Asegurarse de que las carpetas tengan los permisos adecuados
              sudo find /var/www/vulco -type d -exec chmod 755 {} \;
              
              # Asegurarse de que el archivo .env tenga los permisos adecuados
              sudo chown ${{ secrets.REMOTE_USER }}:www-data /var/www/vulco/.env
              sudo chmod 664 /var/www/vulco/.env
              
              # Instalar dependencias de Composer
              echo "Installing Composer production dependencies..."
              composer install --no-dev --working-dir=/var/www/vulco
                  
              # Ejecutar comandos de Artisan para optimizar la aplicaciÃ³n
              echo "Running Artisan commands..."
              php /var/www/vulco/artisan config:cache
              php /var/www/vulco/artisan route:cache
              php /var/www/vulco/artisan view:cache
              
              # echo "Running migrations"
              # php /var/www/vulco/artisan migrate --force
              
              echo "Clearing cache and optimizing..."
              php /var/www/vulco/artisan optimize:clear
              php /var/www/vulco/artisan optimize
              
              echo "Clearing authentication files..."
              php /var/www/vulco/artisan auth:clear

              # Check and remove directories if they exist
              # Array of directories to check and remove
              directories=("cypress" "tests" "public/vendor" "resources/css" "resources/js" "resources/img")

              # Loop through each directory
              for dir in "${directories[@]}"; do
                  if [ -d "$dir" ]; then
                      rm -rf "$dir"
                      echo "Removed directory: $dir"
                  fi
              done

              # Check and remove files if they exist
              # Array of files to check and remove
              files=(
                  ".codiumai.toml"
                  ".editorconfig"
                  "access_token.txt"
                  "appchain.github-issues"
                  "babel.config.cjs"
                  "composer-setup.php"
                  "cypress.config.js"
                  "infection.json"
                  "jsconfig.json"
                  "stryker.config.mjs"
                  "package.json"
                  "phpunit.xml"
                  "postcss.config.cjs"
                  "rebel.xml"
                  "tailwind.config.js"
                  "vite.config.js"
              )

              # Loop through each file
              for file in "${files[@]}"; do
                  if [ -f "$file" ]; then
                      rm "$file"
                      echo "Removed file: $file"
                  fi
              done
              
              echo "Cleanup complete!"
              du -h --max-depth=1
              echo "Deployment completed successfully."
              
            else
              echo "Pulling latest changes..."
              cd /var/www/vulco
              git pull origin vulco-deploy
              du -h --max-depth=1
              echo "Deployment completed successfully."
            fi
